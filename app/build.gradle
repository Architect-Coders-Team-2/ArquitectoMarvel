plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

/**
 * Método que devuelve un objeto properties para consultar valores puestos en un archivo no expuesto en git (declarado en .gitignore)
 * El archivo debe llamarse secret.properties y encontrarse al nivel de este build.gradle (ArquitectoMarvel/app/secret.properties)
 * Se llamarán MARVEL_API_KEY y MARVEL_PRIVATE_KEY
 * Registrarse en: https://www.marvel.com/signin?referer=https%3A%2F%2Fdeveloper.marvel.com%2Fdocumentation%2Fauthorization para su obtención
 * Los valores se añaden sin comillas en secret.properties, tal que así:
 * MARVEL_API_KEY=asas1121sdsd343
 * MARVEL_PRIVATE_KEY=dfdfeerer3434gdgd
 * todo: (eliminar comentarío una vez validado pull request por el equipo)
 * @return
 */
def secretProperties() {
    def file = file("secret.properties")
    def properties = new Properties()
    properties.load(new FileInputStream(file))
    return properties
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.architectcoders.arquitectomarvel"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    def MARVEL_API_KEY = 'MARVEL_API_KEY'
    def MARVEL_PRIVATE_KEY = 'MARVEL_PRIVATE_KEY'

    def apikey = secretProperties()[MARVEL_API_KEY]
    def privatekey = secretProperties()[MARVEL_PRIVATE_KEY]

    buildTypes {
        release {
            minifyEnabled false
            buildConfigField("String", MARVEL_API_KEY, "\"" + apikey + "\"")
            buildConfigField("String", MARVEL_PRIVATE_KEY, "\"" + privatekey + "\"")
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            buildConfigField("String", MARVEL_API_KEY, "\"" + apikey + "\"")
            buildConfigField("String", MARVEL_PRIVATE_KEY, "\"" + privatekey + "\"")
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    // test Default
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // Gson
    implementation 'com.google.code.gson:gson:2.8.6'

    // Retrofit
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // Corroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.3.0"

    // Timber
    implementation 'com.jakewharton.timber:timber:4.7.1'
}